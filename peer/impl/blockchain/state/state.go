package state

//
//// Design references : Ethereum Yellow Paper ETHEREUM: A SECURE DECENTRALISED GENERALISED TRANSACTION LEDGER
//// https://ethereum.github.io/yellowpaper/paper.pdf] Ch.4
//// https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf
//
////type Account struct {
////	/*
////		For User Account, PublicKey is generated from the given private key using the Elliptic Curve Digital Signature Algorithm
////		An address for a User Account is generated by taking the last 20 bytes of the Keccak-256 hash of the PublicKey and adding 0x to the beginning.
////
////		For Contract Account, it has a 42 character hexadecimal address. The contract address is usually given when a contract is deployed to the Blockchain.
////		The address comes from the creator's address and the number of transactions sent from that address (the “nonce”).
////	*/
////
////	address string
////	state   *State
////}
//
//type State struct {
//	// Nonce – A counter that indicates the number of transactions sent from the account.
//	// This ensures transactions are only processed once.
//	// In a contract account, this number represents the number of contracts created by the account.
//	Nonce uint
//
//	// Balance – The number of money owned by this address.
//	Balance float64
//
//	// CodeHash – This is a hash refers to the code of an account on the Ethereum virtual machine (EVM).
//	// CodeHash is DISABLED for Externally owned account (EOA). This field is set to an empty string for EOAs.
//	// Contract accounts have code fragments programmed in that can perform different operations.
//	// This code gets executed if the account gets a message call. It cannot be changed.
//	// All such code fragments are contained in the state database under their corresponding hashes for later retrieval.
//	// This hash value is known as a codeHash.
//	CodeHash string
//
//	// StorageRoot – Sometimes known as a storage hash.
//	// StorageRoot is DISABLED for Externally owned account (EOA). This field is set to an empty string for EOAs.
//	// A 256-bit hash of the root node of a Merkle Patricia trie (or a simple KVStore) that
//	// encodes the storage contents of the account (a mapping between 256-bit integer values),
//	// encoded into the trie as a mapping from the Keccak 256-bit hash of the 256-bit integer keys to the RLP-encoded 256-bit integer values.
//	// This trie encodes the hash of the storage contents of this account, and is empty by default.
//	StorageRoot string
//}
